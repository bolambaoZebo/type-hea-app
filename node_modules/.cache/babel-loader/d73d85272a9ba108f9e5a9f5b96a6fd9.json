{"ast":null,"code":"var _jsxFileName = \"/Users/dnamicro/Desktop/Type_Head_App/react-github-typeahead/src/typeahead.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TypeAhead() {\n  _s();\n\n  const [state, setState] = useState({\n    input: '',\n    isShow: true,\n    user: {\n      avatar_url: '',\n      login: ''\n    },\n    error: false\n  });\n  useEffect(() => {\n    state.input && axios.get(`https://api.github.com/users/${state.input}`).then(resp => {\n      const {\n        avatar_url,\n        login\n      } = resp.data;\n      setState({ ...state,\n        user: {\n          avatar_url,\n          login\n        },\n        error: false\n      });\n      console.log(avatar_url);\n    }).catch(e => {\n      setState({ ...state,\n        error: true\n      });\n      console.log('error', e.message);\n    });\n  }, [state.input]);\n\n  const inputChange = e => {\n    const {\n      id,\n      value\n    } = e.target;\n    setState({ ...state,\n      [id]: value,\n      isShow: true\n    });\n  };\n\n  const selectOption = user => {\n    const {\n      download_url,\n      name\n    } = user;\n    setState({ ...state,\n      input: name,\n      isShow: false,\n      image: download_url\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typeahead\",\n    children: [state.error && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-field\",\n        children: \"API limit exceeded. Check out the documentation for more details: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"input\",\n      value: state.input,\n      onChange: inputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typeahead-content\",\n      children: state.input && state.isShow && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => selectOption(state.user.login),\n        className: \"typeahead-content-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"typeahead-content-list-image\",\n          src: state.user.avatar_url,\n          width: 50,\n          height: 50,\n          alt: `${state.user.avatar_url} image`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"typeahead-content-list-name\",\n          children: state.user.login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TypeAhead, \"6RKmosk2k8YMCSKnQLZOB3cIsKU=\");\n\n_c = TypeAhead;\nexport default TypeAhead;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeAhead\");","map":{"version":3,"sources":["/Users/dnamicro/Desktop/Type_Head_App/react-github-typeahead/src/typeahead.js"],"names":["useState","useEffect","axios","TypeAhead","state","setState","input","isShow","user","avatar_url","login","error","get","then","resp","data","console","log","catch","e","message","inputChange","id","value","target","selectOption","download_url","name","image"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nfunction TypeAhead() {\r\n  const [state, setState] = useState({\r\n    input: '',\r\n    isShow: true,\r\n    user: {\r\n      avatar_url: '',\r\n      login: ''\r\n    },\r\n    error: false\r\n  })\r\n\r\n\r\n  useEffect(() => {\r\n    state.input && axios.get(`https://api.github.com/users/${state.input}`)\r\n      .then(resp => {\r\n        const { avatar_url, login } = resp.data;\r\n        setState({ ...state, user: { avatar_url, login }, error: false })\r\n        console.log(avatar_url)\r\n      })\r\n      .catch(e => {\r\n        setState({...state, error: true})\r\n        console.log('error', e.message)\r\n      })\r\n  }, [state.input])\r\n\r\n\r\n  const inputChange = (e) => {\r\n    const { id, value } = e.target\r\n    setState({ ...state, [id]: value, isShow: true })\r\n  }\r\n\r\n  const selectOption = (user) => {\r\n    const { download_url, name } = user\r\n    setState({ ...state, input: name, isShow: false, image: download_url })\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"typeahead\">\r\n      { state.error && (\r\n        <>\r\n      <span className=\"error-field\">\r\n        API limit exceeded. Check out the documentation for more details: </span>\r\n        <i>https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting</i>\r\n        </>\r\n      )\r\n      }\r\n      <input type=\"text\" id=\"input\" value={state.input} onChange={inputChange} />\r\n      <div className=\"typeahead-content\">\r\n        {\r\n          (state.input && state.isShow) && (\r\n            <div\r\n              onClick={() => selectOption(state.user.login)} className=\"typeahead-content-list\"\r\n            >\r\n              <img className=\"typeahead-content-list-image\"  src={state.user.avatar_url} width={50} height={50} alt={`${state.user.avatar_url} image`} />\r\n              <span className=\"typeahead-content-list-name\">{state.user.login}</span>\r\n            </div>\r\n          )\r\n        }\r\n\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default TypeAhead;"]},"metadata":{},"sourceType":"module"}